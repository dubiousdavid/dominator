;; Analyzed by ClojureScript 0.0-3178
{:use-macros nil, :excludes #{}, :name dominator.core, :imports nil, :requires {html stch.html, stch.html stch.html, dominator.attributes dominator.attributes, sig jamesmacaulay.zelkova.signal, jamesmacaulay.zelkova.signal jamesmacaulay.zelkova.signal}, :uses {attrs->props dominator.attributes}, :defs {->vtree {:protocol-inline nil, :meta {:line 27, :column 7, :end-line 27, :end-column 14, :arglists (quote ([x])), :doc "Convert markup to a VTree.", :file nil}, :name dominator.core/->vtree, :variadic false, :file "src/dominator/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert markup to a VTree.", :test true}, VDOMBuilder {:meta {:line 12, :column 14, :end-line 12, :end-column 25, :doc nil, :protocol-symbol true, :protocol-info {:methods {-vtree [[this]]}}, :file nil}, :protocol-symbol true, :name dominator.core/VDOMBuilder, :file "src/dominator/core.cljs", :end-column 25, :column 1, :line 12, :protocol-info {:methods {-vtree [[this]]}}, :info nil, :end-line 12, :impls #{stch.html/Element default string}, :doc nil, :test true}, diff {:name dominator.core/diff, :line 10, :column 1, :end-line 10, :end-column 10, :test true, :meta {:line 10, :column 6, :end-line 10, :end-column 10, :file nil}, :file "src/dominator/core.cljs"}, -vtree {:protocol-inline nil, :meta {:line 13, :column 4, :end-line 13, :end-column 10, :protocol dominator.core/VDOMBuilder, :doc nil, :arglists (quote ([this])), :file nil}, :protocol dominator.core/VDOMBuilder, :name dominator.core/-vtree, :variadic false, :file "src/dominator/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, patch {:name dominator.core/patch, :line 9, :column 1, :end-line 9, :end-column 11, :test true, :meta {:line 9, :column 6, :end-line 9, :end-column 11, :file nil}, :file "src/dominator/core.cljs"}, VNode {:name dominator.core/VNode, :line 6, :column 1, :end-line 6, :end-column 11, :test true, :meta {:line 6, :column 6, :end-line 6, :end-column 11, :file nil}, :file "src/dominator/core.cljs"}, create {:name dominator.core/create, :line 8, :column 1, :end-line 8, :end-column 12, :test true, :meta {:line 8, :column 6, :end-line 8, :end-column 12, :file nil}, :file "src/dominator/core.cljs"}, map->VDOM {:protocol-inline nil, :meta {:line 34, :column 12, :end-line 34, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__9172])), :file nil}, :name dominator.core/map->VDOM, :variadic false, :file "src/dominator/core.cljs", :end-column 16, :method-params ([G__9172]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9172])), :test true}, VDOM {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name dominator.core/VDOM, :file "src/dominator/core.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 34, :record true, :end-line 34, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, animate {:protocol-inline nil, :meta {:line 51, :column 7, :end-line 51, :end-column 14, :arglists (quote ([f])), :doc "Call f on the next animation frame.", :file nil}, :name dominator.core/animate, :variadic false, :file "src/dominator/core.cljs", :end-column 14, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Call f on the next animation frame.", :test true}, ->VDOM {:protocol-inline nil, :meta {:line 34, :column 12, :end-line 34, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([tree root-node])), :file nil}, :name dominator.core/->VDOM, :variadic false, :file "src/dominator/core.cljs", :end-column 16, :method-params ([tree root-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree root-node])), :test true}, VText {:name dominator.core/VText, :line 7, :column 1, :end-line 7, :end-column 11, :test true, :meta {:line 7, :column 6, :end-line 7, :end-column 11, :file nil}, :file "src/dominator/core.cljs"}, render {:protocol-inline nil, :meta {:line 56, :column 7, :end-line 56, :end-column 13, :arglists (quote ([sig elem])), :doc "Takes a signal of markup and a Javascript element, and patches the\n  DOM with each animation frame.", :file nil}, :name dominator.core/render, :variadic false, :file "src/dominator/core.cljs", :end-column 13, :method-params ([sig elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sig elem])), :doc "Takes a signal of markup and a Javascript element, and patches the\n  DOM with each animation frame.", :test true}, patch-dom {:protocol-inline nil, :meta {:line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([elem])), :doc "Given a Javascript element elem returns a function that takes markup\n  and renders to the DOM at elem.", :file nil}, :name dominator.core/patch-dom, :variadic false, :file "src/dominator/core.cljs", :end-column 16, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Given a Javascript element elem returns a function that takes markup\n  and renders to the DOM at elem.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:tree :root-node}, :order [:tree :root-node]}, :doc nil}