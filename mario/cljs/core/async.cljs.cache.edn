;; Analyzed by ClojureScript 0.0-3178
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{reduce take map into partition merge partition-by}, :name cljs.core.async, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :uses nil, :defs {->t16384 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta16385])), :file nil}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t16384, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta16385]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 499, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta16385])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, Pub {:meta {:line 557, :column 14, :end-line 557, :end-column 17, :doc nil, :protocol-symbol true, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :file nil}, :protocol-symbol true, :name cljs.core.async/Pub, :file "mario/cljs/core/async.cljs", :end-column 17, :column 1, :line 557, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 557, :impls #{cljs.core.async/t16544}, :doc nil, :test true}, t15749 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t15749, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 390, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reduce {:protocol-inline nil, :meta {:line 329, :column 7, :end-line 329, :end-column 13, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :file nil}, :name cljs.core.async/reduce, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 13, :method-params ([f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :test true}, remove> {:protocol-inline nil, :meta {:line 776, :column 7, :end-line 776, :end-column 14, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :file nil}, :name cljs.core.async/remove>, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 776, :end-line 776, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, timeout {:protocol-inline nil, :meta {:line 64, :column 7, :end-line 64, :end-column 14, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs", :file nil}, :name cljs.core.async/timeout, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs", :test true}, unsub* {:protocol-inline nil, :meta {:line 559, :column 4, :end-line 559, :end-column 10, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p v ch])), :file nil}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :method-params ([p v ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 557, :end-line 559, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch])), :doc nil, :test true}, admix* {:protocol-inline nil, :meta {:line 437, :column 4, :end-line 437, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch])), :file nil}, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, unmix* {:protocol-inline nil, :meta {:line 438, :column 4, :end-line 438, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch])), :file nil}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 438, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, mapcat* {:protocol-inline nil, :meta {:line 800, :column 8, :end-line 800, :end-column 15, :private true, :arglists (quote ([f in out])), :file nil}, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 15, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 800, :end-line 800, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out])), :test true}, mix {:protocol-inline nil, :meta {:line 454, :column 7, :end-line 454, :end-column 10, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :file nil}, :name cljs.core.async/mix, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :test true}, ->t15020 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-flag flag meta15021])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t15020, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([alt-flag flag meta15021]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([alt-flag flag meta15021])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, pub {:protocol-inline nil, :meta {:line 562, :column 7, :end-line 562, :end-column 10, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/pub, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 3, :fn-var true, :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :test true}, take {:protocol-inline nil, :meta {:line 699, :column 7, :end-line 699, :end-column 11, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/take, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :test true}, unsub-all* {:protocol-inline nil, :meta {:line 560, :column 4, :end-line 560, :end-column 14, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p] [p v])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :file nil}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :method-params ([p] [p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 557, :end-line 560, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p v]), :doc nil, :test true}, <! {:protocol-inline nil, :meta {:line 69, :column 7, :end-line 69, :end-column 9, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed", :file nil}, :name cljs.core.async/<!, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 9, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed", :test true}, map {:protocol-inline nil, :meta {:line 638, :column 7, :end-line 638, :end-column 10, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/map, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 638, :end-line 638, :max-fixed-arity 3, :fn-var true, :arglists ([f chs] [f chs buf-or-n]), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :test true}, Mux {:meta {:line 368, :column 14, :end-line 368, :end-column 17, :doc nil, :protocol-symbol true, :protocol-info {:methods {muxch* [[_]]}}, :file nil}, :protocol-symbol true, :name cljs.core.async/Mux, :file "mario/cljs/core/async.cljs", :end-column 17, :column 1, :line 368, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 368, :impls #{cljs.core.async/t16544 cljs.core.async/t16265 cljs.core.async/t16384 cljs.core.async/t15970 cljs.core.async/t15749}, :doc nil, :test true}, ->t16926 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta16927])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16926, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([map< f ch meta16927]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 722, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map< f ch meta16927])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, mapcat> {:protocol-inline nil, :meta {:line 818, :column 7, :end-line 818, :end-column 14, :arglists (quote ([f out] [f out buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/mapcat>, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 818, :end-line 818, :max-fixed-arity 3, :fn-var true, :arglists ([f out] [f out buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, fhnop {:name cljs.core.async/fhnop, :line 92, :column 1, :end-line 92, :end-column 21, :private true, :test true, :meta {:line 92, :column 16, :end-line 92, :end-column 21, :private true, :file nil}, :file "mario/cljs/core/async.cljs"}, ->t15749 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([mult ch cs meta15750])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t15749, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([mult ch cs meta15750]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 390, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult ch cs meta15750])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t16938 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map> f ch meta16939])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16938, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([map> f ch meta16939]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 748, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map> f ch meta16939])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t16944 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16944, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 762, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t16929 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16929, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 731, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, buffer {:protocol-inline nil, :meta {:line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :file nil}, :name cljs.core.async/buffer, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :test true}, close! {:protocol-inline nil, :meta {:line 120, :column 7, :end-line 120, :end-column 13, :arglists (quote ([port])), :file nil}, :name cljs.core.async/close!, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 13, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :test true}, ->t16265 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta16266])), :file nil}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t16265, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta16266]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 499, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta16266])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t16935 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta16933 _ fn1 meta16936])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16935, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([map< f ch meta16933 _ fn1 meta16936]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 731, :max-fixed-arity 7, :fn-var true, :arglists (quote ([map< f ch meta16933 _ fn1 meta16936])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t16938 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16938, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 748, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, chan {:protocol-inline nil, :meta {:line 42, :column 7, :end-line 42, :end-column 11, :arglists (quote ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler])), :doc "Creates a channel with an optional buffer, an optional transducer (like (map f),\n  (filter p) etc or a composition thereof), and an optional exception handler.\n  If buf-or-n is a number, will create and use a fixed buffer of that size. If a\n  transducer is supplied a buffer must be specified. ex-handler must be a\n  fn of one argument - if an exception occurs during transformation it will be called\n  with the thrown value as an argument, and any non-nil return value will be placed\n  in the channel.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists-meta (nil nil nil nil)}, :file nil}, :name cljs.core.async/chan, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists-meta (nil nil nil nil)}, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 3, :fn-var true, :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :doc "Creates a channel with an optional buffer, an optional transducer (like (map f),\n  (filter p) etc or a composition thereof), and an optional exception handler.\n  If buf-or-n is a number, will create and use a fixed buffer of that size. If a\n  transducer is supplied a buffer must be specified. ex-handler must be a\n  fn of one argument - if an exception occurs during transformation it will be called\n  with the thrown value as an argument, and any non-nil return value will be placed\n  in the channel.", :test true}, solo-mode* {:protocol-inline nil, :meta {:line 441, :column 4, :end-line 441, :end-column 14, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m mode])), :file nil}, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([m mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 441, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode])), :doc nil, :test true}, tap {:protocol-inline nil, :meta {:line 419, :column 7, :end-line 419, :end-column 10, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/tap, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 419, :end-line 419, :max-fixed-arity 3, :fn-var true, :arglists ([mult ch] [mult ch close?]), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :test true}, admix {:protocol-inline nil, :meta {:line 524, :column 7, :end-line 524, :end-column 12, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix", :file nil}, :name cljs.core.async/admix, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 524, :end-line 524, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix", :test true}, unique {:protocol-inline nil, :meta {:line 826, :column 7, :end-line 826, :end-column 13, :arglists (quote ([ch] [ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/unique, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 826, :end-line 826, :max-fixed-arity 2, :fn-var true, :arglists ([ch] [ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, muxch* {:protocol-inline nil, :meta {:line 369, :column 4, :end-line 369, :end-column 10, :protocol cljs.core.async/Mux, :doc nil, :arglists (quote ([_])), :file nil}, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 369, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil, :test true}, t15023 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t15023, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 141, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, solo-mode {:protocol-inline nil, :meta {:line 551, :column 7, :end-line 551, :end-column 16, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :file nil}, :name cljs.core.async/solo-mode, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :method-params ([mix mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 551, :end-line 551, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :test true}, onto-chan {:protocol-inline nil, :meta {:line 343, :column 7, :end-line 343, :end-column 16, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/onto-chan, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 3, :fn-var true, :arglists ([ch coll] [ch coll close?]), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :test true}, to-chan {:protocol-inline nil, :meta {:line 359, :column 7, :end-line 359, :end-column 14, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :file nil}, :name cljs.core.async/to-chan, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :test true}, dropping-buffer {:protocol-inline nil, :meta {:line 23, :column 7, :end-line 23, :end-column 22, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :file nil}, :name cljs.core.async/dropping-buffer, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :test true}, untap-all {:protocol-inline nil, :meta {:line 432, :column 7, :end-line 432, :end-column 16, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult", :file nil}, :name cljs.core.async/untap-all, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 432, :end-line 432, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult", :test true}, into {:protocol-inline nil, :meta {:line 692, :column 7, :end-line 692, :end-column 11, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :file nil}, :name cljs.core.async/into, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :method-params ([coll ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :test true}, ->t16932 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta16933])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16932, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([map< f ch meta16933]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 722, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map< f ch meta16933])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t16544 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([ch topic-fn buf-fn mults ensure-mult meta16545])), :file nil}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t16544, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([ch topic-fn buf-fn mults ensure-mult meta16545]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 14, :factory :positional, :line 591, :max-fixed-arity 6, :fn-var true, :arglists (quote ([ch topic-fn buf-fn mults ensure-mult meta16545])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, pipeline {:protocol-inline nil, :meta {:line 291, :column 7, :end-line 291, :end-column 15, :arglists (quote ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler])), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the transducer xf, with parallelism n. Because\n  it is parallel, the transducer will be applied independently to each\n  element, not across elements, and may produce zero or more outputs\n  per input.  Outputs will be returned in order relative to the\n  inputs. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes.\n\n  Note this is supplied for API compatibility with the Clojure version.\n  Values of N > 1 will not result in actual concurrency in a\n  single-threaded runtime.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists-meta (nil nil nil)}, :file nil}, :name cljs.core.async/pipeline, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists-meta (nil nil nil)}, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 6, :fn-var true, :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the transducer xf, with parallelism n. Because\n  it is parallel, the transducer will be applied independently to each\n  element, not across elements, and may produce zero or more outputs\n  per input.  Outputs will be returned in order relative to the\n  inputs. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes.\n\n  Note this is supplied for API compatibility with the Clojure version.\n  Values of N > 1 will not result in actual concurrency in a\n  single-threaded runtime.", :test true}, ->t16944 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([filter> p ch meta16945])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16944, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([filter> p ch meta16945]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 762, :max-fixed-arity 4, :fn-var true, :arglists (quote ([filter> p ch meta16945])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, sub {:protocol-inline nil, :meta {:line 617, :column 7, :end-line 617, :end-column 10, :arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/sub, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}, :method-params ([p topic ch] [p topic ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 617, :end-line 617, :max-fixed-arity 4, :fn-var true, :arglists ([p topic ch] [p topic ch close?]), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :test true}, t16265 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t16265, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 499, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-flag {:protocol-inline nil, :meta {:line 139, :column 8, :end-line 139, :end-column 16, :private true, :arglists (quote ([])), :file nil}, :private true, :name cljs.core.async/alt-flag, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, map> {:protocol-inline nil, :meta {:line 745, :column 7, :end-line 745, :end-column 11, :arglists (quote ([f ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :file nil}, :name cljs.core.async/map>, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 745, :end-line 745, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, ->t15029 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-handler flag cb meta15030])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t15029, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([alt-handler flag cb meta15030]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 149, :max-fixed-arity 4, :fn-var true, :arglists (quote ([alt-handler flag cb meta15030])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, pipeline* {:protocol-inline nil, :meta {:line 226, :column 8, :end-line 226, :end-column 17, :private true, :arglists (quote ([n to xf from close? ex-handler type])), :file nil}, :private true, :name cljs.core.async/pipeline*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 17, :method-params ([n to xf from close? ex-handler type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 7, :fn-var true, :arglists (quote ([n to xf from close? ex-handler type])), :test true}, t16384 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t16384, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 499, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipe {:protocol-inline nil, :meta {:line 210, :column 7, :end-line 210, :end-column 11, :arglists (quote ([from to] [from to close?])), :doc "Takes elements from the from channel and supplies them to the to\n   channel. By default, the to channel will be closed when the from\n   channel closes, but can be determined by the close?  parameter. Will\n   stop consuming the from channel if the to channel closes", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([from to] [from to close?]), :arglists ([from to] [from to close?]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/pipe, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([from to] [from to close?]), :arglists ([from to] [from to close?]), :arglists-meta (nil nil)}, :method-params ([from to] [from to close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 3, :fn-var true, :arglists ([from to] [from to close?]), :doc "Takes elements from the from channel and supplies them to the to\n   channel. By default, the to channel will be closed when the from\n   channel closes, but can be determined by the close?  parameter. Will\n   stop consuming the from channel if the to channel closes", :test true}, ->t15001 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([fn-handler f meta15002])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t15001, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([fn-handler f meta15002]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fn-handler f meta15002])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, unmix {:protocol-inline nil, :meta {:line 529, :column 7, :end-line 529, :end-column 12, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix", :file nil}, :name cljs.core.async/unmix, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix", :test true}, ->t16941 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map> f ch meta16942])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16941, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([map> f ch meta16942]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 748, :max-fixed-arity 4, :fn-var true, :arglists (quote ([map> f ch meta16942])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, filter< {:protocol-inline nil, :meta {:line 781, :column 7, :end-line 781, :end-column 14, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/filter<, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 781, :end-line 781, :max-fixed-arity 3, :fn-var true, :arglists ([p ch] [p ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, sub* {:protocol-inline nil, :meta {:line 558, :column 4, :end-line 558, :end-column 8, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p v ch close?])), :file nil}, :protocol cljs.core.async/Pub, :name cljs.core.async/sub*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 8, :method-params ([p v ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 557, :end-line 558, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p v ch close?])), :doc nil, :test true}, remove< {:protocol-inline nil, :meta {:line 795, :column 7, :end-line 795, :end-column 14, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/remove<, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 795, :end-line 795, :max-fixed-arity 3, :fn-var true, :arglists ([p ch] [p ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, ->t16947 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([filter> p ch meta16948])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16947, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([filter> p ch meta16948]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 762, :max-fixed-arity 4, :fn-var true, :arglists (quote ([filter> p ch meta16948])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t16926 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16926, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 722, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, untap* {:protocol-inline nil, :meta {:line 373, :column 4, :end-line 373, :end-column 10, :protocol cljs.core.async/Mult, :doc nil, :arglists (quote ([m ch])), :file nil}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 373, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, t15020 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t15020, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 141, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, toggle {:protocol-inline nil, :meta {:line 539, :column 7, :end-line 539, :end-column 13, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :file nil}, :name cljs.core.async/toggle, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 13, :method-params ([mix state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 539, :end-line 539, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :test true}, untap-all* {:protocol-inline nil, :meta {:line 374, :column 4, :end-line 374, :end-column 14, :protocol cljs.core.async/Mult, :doc nil, :arglists (quote ([m])), :file nil}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap-all*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil, :test true}, t16941 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16941, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 748, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sliding-buffer {:protocol-inline nil, :meta {:line 29, :column 7, :end-line 29, :end-column 21, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :file nil}, :name cljs.core.async/sliding-buffer, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :test true}, t16947 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16947, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 762, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, partition {:protocol-inline nil, :meta {:line 842, :column 7, :end-line 842, :end-column 16, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/partition, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 842, :end-line 842, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, Mult {:meta {:line 371, :column 14, :end-line 371, :end-column 18, :doc nil, :protocol-symbol true, :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :file nil}, :protocol-symbol true, :name cljs.core.async/Mult, :file "mario/cljs/core/async.cljs", :end-column 18, :column 1, :line 371, :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :info nil, :end-line 371, :impls #{cljs.core.async/t15970 cljs.core.async/t15749}, :doc nil, :test true}, merge {:protocol-inline nil, :meta {:line 674, :column 7, :end-line 674, :end-column 12, :arglists (quote ([chs] [chs buf-or-n])), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([chs] [chs buf-or-n]), :arglists ([chs] [chs buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/merge, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([chs] [chs buf-or-n]), :arglists ([chs] [chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([chs] [chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 674, :end-line 674, :max-fixed-arity 2, :fn-var true, :arglists ([chs] [chs buf-or-n]), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :test true}, partition-by {:protocol-inline nil, :meta {:line 864, :column 7, :end-line 864, :end-column 19, :arglists (quote ([f ch] [f ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f ch] [f ch buf-or-n]), :arglists ([f ch] [f ch buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/partition-by, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f ch] [f ch buf-or-n]), :arglists ([f ch] [f ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f ch] [f ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 864, :end-line 864, :max-fixed-arity 3, :fn-var true, :arglists ([f ch] [f ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, unsub-all {:protocol-inline nil, :meta {:line 630, :column 7, :end-line 630, :end-column 16, :arglists (quote ([p] [p topic])), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p topic]), :arglists ([p] [p topic]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/unsub-all, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p topic]), :arglists ([p] [p topic]), :arglists-meta (nil nil)}, :method-params ([p] [p topic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 630, :end-line 630, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p topic]), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :test true}, t15029 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t15029, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 149, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t16544 {:num-fields 6, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t16544, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 591, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, >! {:protocol-inline nil, :meta {:line 94, :column 7, :end-line 94, :end-column 9, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.\n  Returns true unless port is already closed.", :file nil}, :name cljs.core.async/>!, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 9, :method-params ([port val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.\n  Returns true unless port is already closed.", :test true}, t16935 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16935, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 731, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unmix-all* {:protocol-inline nil, :meta {:line 439, :column 4, :end-line 439, :end-column 14, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m])), :file nil}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix-all*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil, :test true}, nop {:protocol-inline nil, :meta {:line 91, :column 8, :end-line 91, :end-column 11, :private true, :arglists (quote ([_])), :file nil}, :private true, :name cljs.core.async/nop, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :test true}, split {:protocol-inline nil, :meta {:line 308, :column 7, :end-line 308, :end-column 12, :arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/split, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 4, :fn-var true, :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :test true}, ->t15970 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([mult ch cs meta15971])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t15970, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([mult ch cs meta15971]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 390, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult ch cs meta15971])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, unmix-all {:protocol-inline nil, :meta {:line 534, :column 7, :end-line 534, :end-column 16, :arglists (quote ([mix])), :doc "removes all inputs from the mix", :file nil}, :name cljs.core.async/unmix-all, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 16, :method-params ([mix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 534, :end-line 534, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mix])), :doc "removes all inputs from the mix", :test true}, filter> {:protocol-inline nil, :meta {:line 759, :column 7, :end-line 759, :end-column 14, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :file nil}, :name cljs.core.async/filter>, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 759, :end-line 759, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, tap* {:protocol-inline nil, :meta {:line 372, :column 4, :end-line 372, :end-column 8, :protocol cljs.core.async/Mult, :doc nil, :arglists (quote ([m ch close?])), :file nil}, :protocol cljs.core.async/Mult, :name cljs.core.async/tap*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 8, :method-params ([m ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 372, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m ch close?])), :doc nil, :test true}, untap {:protocol-inline nil, :meta {:line 427, :column 7, :end-line 427, :end-column 12, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult", :file nil}, :name cljs.core.async/untap, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :method-params ([mult ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 427, :end-line 427, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult", :test true}, ->t15026 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-handler flag cb meta15027])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t15026, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([alt-handler flag cb meta15027]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 149, :max-fixed-arity 4, :fn-var true, :arglists (quote ([alt-handler flag cb meta15027])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, alt-handler {:protocol-inline nil, :meta {:line 148, :column 8, :end-line 148, :end-column 19, :private true, :arglists (quote ([flag cb])), :file nil}, :private true, :name cljs.core.async/alt-handler, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 19, :method-params ([flag cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flag cb])), :test true}, alts! {:protocol-inline nil, :meta {:line 182, :column 7, :end-line 182, :end-column 12, :arglists (quote ([ports & {:as opts}])), :doc "Completes at most one of several channel operations. Must be called\n   inside a (go ...) block. ports is a vector of channel endpoints,\n   which can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and a\n  boolean (true unless already closed, as per put!) for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ports {:as opts})], :arglists [[ports & {:as opts}]], :arglists-meta (nil)}, :file nil}, :name cljs.core.async/alts!, :variadic true, :file "mario/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ports {:as opts})], :arglists [[ports & {:as opts}]], :arglists-meta (nil)}, :method-params [(ports {:as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists [[ports & {:as opts}]], :doc "Completes at most one of several channel operations. Must be called\n   inside a (go ...) block. ports is a vector of channel endpoints,\n   which can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and a\n  boolean (true unless already closed, as per put!) for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :test true}, unsub {:protocol-inline nil, :meta {:line 625, :column 7, :end-line 625, :end-column 12, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub", :file nil}, :name cljs.core.async/unsub, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :method-params ([p topic ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 625, :end-line 625, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub", :test true}, t15970 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t15970, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 390, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t15026 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t15026, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 149, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map< {:protocol-inline nil, :meta {:line 719, :column 7, :end-line 719, :end-column 11, :arglists (quote ([f ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :file nil}, :name cljs.core.async/map<, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 719, :end-line 719, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, fn-handler {:protocol-inline nil, :meta {:line 12, :column 8, :end-line 12, :end-column 18, :private true, :arglists (quote ([f])), :file nil}, :private true, :name cljs.core.async/fn-handler, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, do-alts {:protocol-inline nil, :meta {:line 156, :column 7, :end-line 156, :end-column 14, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued", :file nil}, :name cljs.core.async/do-alts, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :method-params ([fret ports opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued", :test true}, random-array {:protocol-inline nil, :meta {:line 125, :column 8, :end-line 125, :end-column 20, :private true, :arglists (quote ([n])), :file nil}, :private true, :name cljs.core.async/random-array, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, pipeline-async {:protocol-inline nil, :meta {:line 276, :column 7, :end-line 276, :end-column 21, :arglists (quote ([n to af from] [n to af from close?])), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the async function af, with parallelism n. af\n  must be a function of two arguments, the first an input value and\n  the second a channel on which to place the result(s). af must close!\n  the channel before returning.  The presumption is that af will\n  return immediately, having launched some asynchronous operation\n  whose completion/callback will manipulate the result channel. Outputs\n  will be returned in order relative to  the inputs. By default, the to\n  channel will be closed when the from channel closes, but can be\n  determined by the close?  parameter. Will stop consuming the from\n  channel if the to channel closes.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([n to af from] [n to af from close?]), :arglists ([n to af from] [n to af from close?]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/pipeline-async, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([n to af from] [n to af from close?]), :arglists ([n to af from] [n to af from close?]), :arglists-meta (nil nil)}, :method-params ([n to af from] [n to af from close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 5, :fn-var true, :arglists ([n to af from] [n to af from close?]), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the async function af, with parallelism n. af\n  must be a function of two arguments, the first an input value and\n  the second a channel on which to place the result(s). af must close!\n  the channel before returning.  The presumption is that af will\n  return immediately, having launched some asynchronous operation\n  whose completion/callback will manipulate the result channel. Outputs\n  will be returned in order relative to  the inputs. By default, the to\n  channel will be closed when the from channel closes, but can be\n  determined by the close?  parameter. Will stop consuming the from\n  channel if the to channel closes.", :test true}, Mix {:meta {:line 436, :column 14, :end-line 436, :end-column 17, :doc nil, :protocol-symbol true, :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :file nil}, :protocol-symbol true, :name cljs.core.async/Mix, :file "mario/cljs/core/async.cljs", :end-column 17, :column 1, :line 436, :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :info nil, :end-line 436, :impls #{cljs.core.async/t16265 cljs.core.async/t16384}, :doc nil, :test true}, toggle* {:protocol-inline nil, :meta {:line 440, :column 4, :end-line 440, :end-column 11, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m state-map])), :file nil}, :protocol cljs.core.async/Mix, :name cljs.core.async/toggle*, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :method-params ([m state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 440, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m state-map])), :doc nil, :test true}, mult {:protocol-inline nil, :meta {:line 376, :column 7, :end-line 376, :end-column 11, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult.", :file nil}, :name cljs.core.async/mult, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult.", :test true}, t14998 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t14998, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 13, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat< {:protocol-inline nil, :meta {:line 810, :column 7, :end-line 810, :end-column 14, :arglists (quote ([f in] [f in buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f in] [f in buf-or-n]), :arglists ([f in] [f in buf-or-n]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/mapcat<, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f in] [f in buf-or-n]), :arglists ([f in] [f in buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f in] [f in buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 810, :end-line 810, :max-fixed-arity 3, :fn-var true, :arglists ([f in] [f in buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead", :test true}, ioc-alts! {:protocol-inline nil, :meta {:line 443, :column 7, :end-line 443, :end-column 16, :arglists (quote ([state cont-block ports & {:as opts}])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(state cont-block ports {:as opts})], :arglists [[state cont-block ports & {:as opts}]], :arglists-meta (nil)}, :file nil}, :name cljs.core.async/ioc-alts!, :variadic true, :file "mario/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(state cont-block ports {:as opts})], :arglists [[state cont-block ports & {:as opts}]], :arglists-meta (nil)}, :method-params [(state cont-block ports {:as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 3, :fn-var true, :arglists [[state cont-block ports & {:as opts}]], :test true}, ->t15023 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([alt-flag flag meta15024])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t15023, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([alt-flag flag meta15024]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([alt-flag flag meta15024])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, unblocking-buffer? {:protocol-inline nil, :meta {:line 36, :column 7, :end-line 36, :end-column 25, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :file nil}, :name cljs.core.async/unblocking-buffer?, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 25, :method-params ([buff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :test true}, t16932 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t16932, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 722, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, put! {:protocol-inline nil, :meta {:line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([port val] [port val fn1] [port val fn1 on-caller?])), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([port val] [port val fn1] [port val fn1 on-caller?]), :arglists ([port val] [port val fn1] [port val fn1 on-caller?]), :arglists-meta (nil nil nil)}, :file nil}, :name cljs.core.async/put!, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([port val] [port val fn1] [port val fn1 on-caller?]), :arglists ([port val] [port val fn1] [port val fn1 on-caller?]), :arglists-meta (nil nil nil)}, :method-params ([port val] [port val fn1] [port val fn1 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 4, :fn-var true, :arglists ([port val] [port val fn1] [port val fn1 on-caller?]), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :test true}, ->t14998 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([fn-handler f meta14999])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t14998, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([fn-handler f meta14999]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fn-handler f meta14999])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, take! {:protocol-inline nil, :meta {:line 76, :column 7, :end-line 76, :end-column 12, :arglists (quote ([port fn1] [port fn1 on-caller?])), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([port fn1] [port fn1 on-caller?]), :arglists ([port fn1] [port fn1 on-caller?]), :arglists-meta (nil nil)}, :file nil}, :name cljs.core.async/take!, :variadic false, :file "mario/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([port fn1] [port fn1 on-caller?]), :arglists ([port fn1] [port fn1 on-caller?]), :arglists-meta (nil nil)}, :method-params ([port fn1] [port fn1 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists ([port fn1] [port fn1 on-caller?]), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :test true}, t15001 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t15001, :file "mario/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 13, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t16929 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map< f ch meta16927 _ fn1 meta16930])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t16929, :variadic false, :file "mario/cljs/core/async.cljs", :method-params ([map< f ch meta16927 _ fn1 meta16930]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 731, :max-fixed-arity 7, :fn-var true, :arglists (quote ([map< f ch meta16927 _ fn1 meta16930])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}}, :require-macros {ioc cljs.core.async.impl.ioc-macros, cljs.core.async.impl.ioc-macros cljs.core.async.impl.ioc-macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:async :mutes :solo :cljs.core.async/nothing :else :default :compute :recur :priority :solos :pause :mute :reads}, :order [:priority :default :recur :else :async :compute :pause :mute :solo :solos :mutes :reads :cljs.core.async/nothing]}, :doc nil}