;; Analyzed by ClojureScript 0.0-3178
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{delay second}, :name jamesmacaulay.zelkova.time, :imports nil, :requires {t jamesmacaulay.zelkova.impl.time, jamesmacaulay.zelkova.impl.time jamesmacaulay.zelkova.impl.time, z jamesmacaulay.zelkova.signal, jamesmacaulay.zelkova.signal jamesmacaulay.zelkova.signal, impl jamesmacaulay.zelkova.impl.signal, jamesmacaulay.zelkova.impl.signal jamesmacaulay.zelkova.impl.signal, async cljs.core.async, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, >! cljs.core.async}, :defs {every {:protocol-inline nil, :meta {:line 60, :column 7, :end-line 60, :end-column 12, :arglists (quote ([ms])), :doc "Takes a time interval `ms`. The resulting signal is the current time, updated\n  every `ms` milliseconds.", :file nil}, :name jamesmacaulay.zelkova.time/every, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 12, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :doc "Takes a time interval `ms`. The resulting signal is the current time, updated\n  every `ms` milliseconds.", :test true}, timestamp {:protocol-inline nil, :meta {:line 66, :column 7, :end-line 66, :end-column 16, :arglists (quote ([sig])), :doc "Add a timestamp to any signal. Returns a signal of `[timestamp value]`\n  vectors. Timestamps are tied to the origin events of a signal value, so\n  `(timestamp mouse/x)` and `(timestamp mouse/y)` will always have the same\n  timestamp because they rely on the same underlying event (`mouse/position`).", :file nil}, :name jamesmacaulay.zelkova.time/timestamp, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 16, :method-params ([sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sig])), :doc "Add a timestamp to any signal. Returns a signal of `[timestamp value]`\n  vectors. Timestamps are tied to the origin events of a signal value, so\n  `(timestamp mouse/x)` and `(timestamp mouse/y)` will always have the same\n  timestamp because they rely on the same underlying event (`mouse/position`).", :test true}, delay {:protocol-inline nil, :meta {:line 82, :column 7, :end-line 82, :end-column 12, :arglists (quote ([ms sig])), :doc "Delay a signal by `ms` milliseconds.", :file nil}, :name jamesmacaulay.zelkova.time/delay, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 12, :method-params ([ms sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ms sig])), :doc "Delay a signal by `ms` milliseconds.", :test true}, minute {:name jamesmacaulay.zelkova.time/minute, :line 19, :column 1, :end-line 19, :end-column 12, :test true, :meta {:line 19, :column 6, :end-line 19, :end-column 12, :file nil}, :file "mario/jamesmacaulay/zelkova/time.cljs"}, in-seconds {:protocol-inline nil, :meta {:line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([ms])), :file nil}, :name jamesmacaulay.zelkova.time/in-seconds, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 17, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :test true}, hour {:name jamesmacaulay.zelkova.time/hour, :line 20, :column 1, :end-line 20, :end-column 10, :test true, :meta {:line 20, :column 6, :end-line 20, :end-column 10, :file nil}, :file "mario/jamesmacaulay/zelkova/time.cljs"}, in-milliseconds {:protocol-inline nil, :meta {:line 22, :column 7, :end-line 22, :end-column 22, :arglists (quote ([ms])), :file nil}, :name jamesmacaulay.zelkova.time/in-milliseconds, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 22, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :test true}, since {:protocol-inline nil, :meta {:line 100, :column 7, :end-line 100, :end-column 12, :arglists (quote ([ms sig])), :doc "Returns a signal of boolean values: true when `sig` has updated in the past\n  `ms` milliseconds, false otherwise.", :file nil}, :name jamesmacaulay.zelkova.time/since, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 12, :method-params ([ms sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ms sig])), :doc "Returns a signal of boolean values: true when `sig` has updated in the past\n  `ms` milliseconds, false otherwise.", :test true}, in-minutes {:protocol-inline nil, :meta {:line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([ms])), :file nil}, :name jamesmacaulay.zelkova.time/in-minutes, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 17, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :test true}, second {:name jamesmacaulay.zelkova.time/second, :line 18, :column 1, :end-line 18, :end-column 12, :test true, :meta {:line 18, :column 6, :end-line 18, :end-column 12, :file nil}, :file "mario/jamesmacaulay/zelkova/time.cljs"}, debounce {:protocol-inline nil, :meta {:line 110, :column 7, :end-line 110, :end-column 15, :arglists (quote ([ms sig])), :doc "Returns a signal which relays the latest value from `sig` only after `ms`\n  milliseconds have passed since `sig` last updated. Useful when you want to\n  wait until a user stops typing before doing something with the text, for\n  example.", :file nil}, :name jamesmacaulay.zelkova.time/debounce, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 15, :method-params ([ms sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ms sig])), :doc "Returns a signal which relays the latest value from `sig` only after `ms`\n  milliseconds have passed since `sig` last updated. Useful when you want to\n  wait until a user stops typing before doing something with the text, for\n  example.", :test true}, in-hours {:protocol-inline nil, :meta {:line 25, :column 7, :end-line 25, :end-column 15, :arglists (quote ([ms])), :file nil}, :name jamesmacaulay.zelkova.time/in-hours, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 15, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :test true}, fps {:protocol-inline nil, :meta {:line 41, :column 7, :end-line 41, :end-column 10, :arglists (quote ([n])), :doc "Takes desired number of frames per second (fps). The resulting signal gives\n  a sequence of time deltas as quickly as possible until it reaches the desired\n  FPS. A time delta is the time between the last frame and the current frame.", :file nil}, :name jamesmacaulay.zelkova.time/fps, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Takes desired number of frames per second (fps). The resulting signal gives\n  a sequence of time deltas as quickly as possible until it reaches the desired\n  FPS. A time delta is the time between the last frame and the current frame.", :test true}, millisecond {:name jamesmacaulay.zelkova.time/millisecond, :line 17, :column 1, :end-line 17, :end-column 17, :test true, :meta {:line 17, :column 6, :end-line 17, :end-column 17, :file nil}, :file "mario/jamesmacaulay/zelkova/time.cljs"}, every-channel-fn {:protocol-inline nil, :meta {:line 48, :column 8, :end-line 48, :end-column 24, :private true, :arglists (quote ([ms])), :file nil}, :private true, :name jamesmacaulay.zelkova.time/every-channel-fn, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 24, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :test true}, fps-channel-fn {:protocol-inline nil, :meta {:line 27, :column 8, :end-line 27, :end-column 22, :private true, :arglists (quote ([n])), :file nil}, :private true, :name jamesmacaulay.zelkova.time/fps-channel-fn, :variadic false, :file "mario/jamesmacaulay/zelkova/time.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :sources :recur :jamesmacaulay.zelkova.time/every :init-fn :msg-xform :jamesmacaulay.zelkova.time/fps}, :order [:recur :else :jamesmacaulay.zelkova.time/fps :jamesmacaulay.zelkova.time/every :init-fn :sources :msg-xform]}, :doc "Functions for working with time."}